return(c(x.b$p.value-y.b$p.value),t$p.value)
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
#return(c(x.b$estimate - y.b$estimate,t$statistic ))
return(c(x.b$p.value-y.b$p.value,t$p.value))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
#return(c(x.b$estimate - y.b$estimate,t$statistic ))
return(c(x.b$estimate - y.b$estimate,t$p.value))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x = sample(c(0,1),n,replace = T)#, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T)#, prob=c(0.7,0.3))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
#return(c(x.b$estimate - y.b$estimate,t$statistic ))
return(c(x.b$estimate - y.b$estimate,t$p.value))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
res[res[1,]==0,][2,]
res[,res[1,]==0][2,]
res[,res[1,]==0.1][2,]
head(res)
res[,res[1,]==0.09][2,]
res[,res[1,]==-0.09][2,]
res[,res[1,]==-0.11][2,]
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x = sample(c(0,1),n,replace = T)#, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T)#, prob=c(0.7,0.3))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$estimate - y.b$estimate,t$statistic ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$estimate - y.b$estimate,t$statistic ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
t.test(x,rep(0,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
x = sample(c(0,1),n,replace = T, prob=c(0.5,0.5))
t.test(x,rep(0.5,length(x)))
t.test
stats::t.test()
stats::t.test
stats:::t.test
?fisher.test()
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
f = fisher.test(x,y)
x.b$p.value
y.b$p.value
f$p.value
f
f = fisher.test(as.factor(x),as.factor(y))
f
x
y
sum(x)
sum(y)
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
sum(x)
sum(y)
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
f = fisher.test(as.factor(x),as.factor(y))
x.b$p.value
y.b$p.value
f$p.value
f
table(x,y)
f = fisher.test(table(x,y))
f
table(x,y)
table(x)
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
f = fisher.test(
rbind(table(x),table(y))
)
rbind(table(x),table(y))
f
y.b$p.value
f$p.value
x.b$p.value
y.b$p.value
f$p.value
x.b$p.value * y.b$p.value
f$p.value
(x.b$p.value * y.b$p.value) / factorial(length(x))
(x.b$p.value * y.b$p.value) * factorial(length(x))
(x.b$p.value * y.b$p.value)
f$p.value
(x.b$p.value * y.b$p.value) / f$p.value
f$p.value / (x.b$p.value * y.b$p.value)
?factorial()
factorial(1)
factorial(2)
factorial(3)
(factorial(sum(x==0))* factorial(sum(x==0)))
factorial(sum(x==0)+sum(x==1))
factorial(sum(x==0)+sum(x==1)) / (factorial(sum(x==0))* factorial(sum(x==0)))
factorial(length(x))
factorial(length(x)) / (factorial(sum(x==0))* factorial(sum(x==1)))
f$p.value
?binom.test()
binom.test(sum(x),length(x))
n
x
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),length(x))
y.b = binom.test(sum(y),length(x))
x.b
y.b
factorial(length(x)) / (factorial(sum(x==0))* factorial(sum(x==1)))
x.b$p.value
factorial(n) / (factorial(k)* factorial(n-k))
n= 100
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),length(x))
y.b = binom.test(sum(y),length(x))
f = fisher.test(
rbind(table(x),table(y))
)
k = sum(x)
factorial(n) / (factorial(k)* factorial(n-k))
z = factorial(n) / (factorial(k)* factorial(n-k))
z/2
x.b
dbinom(sum(x), n, p=0.5)
dbinom(sum(x), n, p=0)
dbinom(sum(x), n, p=0.5)
pbinom(sum(x), n, p=0.5)
x
sapply(sum(x):n, function(X){factorial(n)/ (factorial(X) * factorial(n-X))})
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(X) * factorial(n-X))}))
f = fisher.test(
rbind(table(x),table(y))
)
f$p.value
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(X) * factorial(n-X))}))
*2
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(X) * factorial(n-X))})) *2
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(X) * factorial(n-X))})) /2
sum(x)
n
1.38*2
x.b = binom.test(sum(x),length(x))
x.b$p.value
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(/2) * factorial(n/2))}))
sum(sapply(sum(x):n, function(X){factorial(n)/ (factorial(n/2) * factorial(n/2))}))
n/2
n
factorial(n)/ (factorial(n/2) * factorial(n/2))})
factorial(n)/ (factorial(n/2) * factorial(n/2))
x.b$p.value
sum(x):n
x.b = binom.test(sum(x),length(x))
x.b$p.value
x.b
pbinom(sum(x), n, 0.5)
pbinom(sum(x) - 1, n, p, lower.tail = FALSE)
pbinom(sum(x) - 1, n, 0.5, lower.tail = FALSE)
x.b$p.value
f$p.value
tx = rbind(table(x),table(y))
tx
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d)) / (factorial(a) * factorial(b) * factorial(c) + factorial(d) + factorial(a+b+c+d))
f = fisher.test(tx)
a = tx[1,1]
b = tx[1,2]
c = tx[2,1]
d = tx[2,2]
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d)) / (factorial(a) * factorial(b) * factorial(c) + factorial(d) + factorial(a+b+c+d))
k = sum(x)
factorial(n) / (factorial(k)* factorial(n-k))
a = tx[1,1]
b = tx[1,2]
c = tx[2,1]
d = tx[2,2]
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d)) / (factorial(a) * factorial(b) * factorial(c) + factorial(d) + factorial(a+b+c+d))
a+b+c+d
factorial(200)
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d))
?phyper()
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d)) / (factorial(a) * factorial(b) * factorial(c) * factorial(d) * factorial(a+b+c+d))
n = 10
n= 10
x = sample(c(0,1),n,replace = T, prob=c(0.3,0.7))
y = sample(c(0,1),n,replace = T, prob=c(0.7,0.3))
x.b = binom.test(sum(x),length(x))
y.b = binom.test(sum(y),length(x))
tx = rbind(table(x),table(y))
f = fisher.test(tx)
a = tx[1,1]
b = tx[1,2]
c = tx[2,1]
d = tx[2,2]
(factorial(a+b) * factorial(c+d) * factorial(a+c) * factorial (b+d)) / (factorial(a) * factorial(b) * factorial(c) * factorial(d) * factorial(a+b+c+d))
fisher.test(tx)
fisher.test
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x.p = round(runif()*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif()*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$p.value * y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
run = function(){
n = 100
x.p = round(runif()*n,1)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif()*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$p.value * y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x.p = round(runif()*n,1)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif()*n,1)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$p.value * y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
n = 100
x.p = round(runif()*n,1)
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n)
y.b = binom.test(sum(y),n)
t = t.test(x,y)
return(c(x.b$p.value * y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
n = 100
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
x
x.p
run = function(){
n = 100
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
t = t.test(x,y)
return(c(x.b$p.value * y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 100
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
t = t.test(x,y)
return(c(x.b$p.value , y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[2,])
lm(res[,3]~ res[1,]*res[2,])
res[,3]
lm(res[3,]~ res[1,]*res[2,])
summary(lm(res[3,]~ res[1,]*res[2,]))
plot(res[1,], res[2,])
m0 = lm(res[3,]~ res[1,]*res[2,])
residuals(m0)
hist(resiudals(m0))
hist(residuals(m0))
plot(res[1,], res[3,])
plot(res[1,]*res[2,], res[3,])
run = function(){
n = 20
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
t = t.test(x,y)
return(c(x.b$p.value , y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
run = function(){
n = 50
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
t = t.test(x,y)
return(c(x.b$p.value , y.b$p.value,t$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[3,])
plot(res[1,]*res[2,], res[3,])
m0 = lm(res[3,]~ res[1,]*res[2,])
summary(m0)
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 50
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
tx = rbind(table(x),table(y))
f = fisher.test(tx)
return(c(x.b$p.value , y.b$p.value,f$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[3,])
plot(res[1,]*res[2,], res[3,])
m0 = lm(res[3,]~ res[1,]*res[2,])
summary(m0)
tx
fisher.test(tx)
fisher.test(t(tx))
f$estimate
plot(res[1,]*res[2,], res[3,])
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 50
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
tx = rbind(table(x),table(y))
f = fisher.test(tx)
return(c(x.b$p.value , y.b$p.value,f$estimate ))
}
res = replicate(1000,run())
plot(res[1,], res[3,])
plot(res[1,]*res[2,], res[3,])
d = read.csv("~/Documents/MPI/CausalGraphs/ForDistribution/Data/WordData.csv", stringsAsFactors = F)
d = d[,c("word",'class','length','celex_freq','aoa','valence','arousal','dominance','RT.z','concreteness','familiarity','Surprisal3','unsDENS')]
names(d) = c("word",'class','length','frequency','ageOfAcquisition','valence','arousal','dominance','ReactionTime','concreteness','polysemy','information','phonologicalDensity')
d = d[d$class == "N",]
d = d[,names(d)!="class"]
d = d[complete.cases(d),]
write.csv(d,"~/Documents/Teaching/QMSS2017/gitfiles/qmss-2017/FindingPatterns/data/wordData.csv", fileEncoding = 'utf-8')
# If done two sided test
# Confidence intervals do not overlap?
run = function(){
n = 50
x.p = round(runif(1)*n)
x = c(rep(0,x.p),rep(1,n-x.p))
y.p = round(runif(1)*n)
y = c(rep(0,y.p),rep(1,n-y.p))
x.b = binom.test(sum(x),n,alternative = "greater")
y.b = binom.test(sum(y),n,alternative = "greater")
tx = rbind(table(x),table(y))
f = fisher.test(tx)
return(c(x.b$p.value , y.b$p.value,f$p.value ))
}
res = replicate(1000,run())
plot(res[1,], res[3,])
plot(res[1,]*res[2,], res[3,])
m0 = lm(res[3,]~ res[1,]*res[2,])
summary(m0)
plot(res[1,], res[3,])
plot(res[2,], res[3,])
plot(res[1,], res[2,])
# Use a PCA to visualise the distances between datapoints with many variables at the same time
setwd("~/Documents/Teaching/QMSS2017/gitfiles/qmss-2017/FindingPatterns/analysis/")
d = read.csv("../data/wordData.csv", stringsAsFactors = F)
str(d)
words = d$word
d = d[,-c(1,2)]
pairs(d, upper.panel = NULL,lower.panel = panel.smooth)
pairs(d, upper.panel = NULL,lower.panel = panel.smooth)
scaled.d = scale(d)
pca <- prcomp(scaled.d)
$x
plot(pca$x[,1:2])
pca$x
dim(pca$x)
plot(pca$x[,c(1,3)])
plot(pca$x[,1:2])
outliers = which(pca$x[,1]< -7)
text(pca$x[outliers,1], pca$x[outliers,2], words[outliers])
dim2 = pca$rotation[,1:2]
dim2[order(dim2[,1]),]
biplot(pca)
biplot(pca)
pca.summary = summary(pca)
plot(cumsum(pca.summary$importance[2,]), type='b')
names(d)
library(party)
library(lattice)
# Set the working directory (will be different for you)
setwd("~/Documents/Teaching/QMSS2017/gitfiles/qmss-2017/FindingPatterns/analysis/")
# Load the word data
d = read.csv("../data/wordData.csv", stringsAsFactors = F)
# Pick some variables to look at
# (choose 4-5, so that the program runs quickly)
myVars = c("length","frequency",'valence','concreteness')
# Take out first two columns (X and word)
d = d[,myVars]
# Make a ctree predicting length by all other variables (the . represents all other variables)
tree = ctree(length ~ ., data=d)
plot(tree)
tree@tree
tree2 = ctree(length ~ ., data=d,
control=ctree_control(maxdepth = 2))
plot(tree2, terminal_panel=node_boxplot)
forestControl = cforest_control(
mtry = 3, # number of predictor variables in each tree
ntree = 100) # Number of trees to run)
# Calculate the forest
forest = cforest(length~ ., data=d,
control = forestControl)
d.varimp <- varimp(forest, conditional=FALSE)
barplot(sort(d.varimp))
abline(h=0)
abline(h=min(abs(d.varimp)), lty=2,col=2)
abline(h=-min(abs(d.varimp)), lty=2, col=2)
